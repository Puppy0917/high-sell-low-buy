# This Python 3 environment comes with many helpful analytics libraries installed
# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python
# For example, here's several helpful packages to load

import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)

# Input data files are available in the read-only "../input/" directory
# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory

import os
for dirname, _, filenames in os.walk('/kaggle/input'):
    for filename in filenames:
        print(os.path.join(dirname, filename))

# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using "Save & Run All" 
# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session

#Importing the library
import lightgbm as lgb
import warnings
warnings.filterwarnings("ignore")

%%time
train = pd.read_csv('../input/jane-street-market-prediction/train.csv')
train = train.astype({c: np.float32 for c in train.select_dtypes(include='float64').columns}) #limit memory use

#We don't want weight=0 datas
train = train.query('weight > 0').reset_index(drop = True)
train.head(10)

#Filling the nan values
f_mean = train.mean()
train.fillna(f_mean, inplace=True)

#For generating 0 or 1 on the basis of resp features(which are returns from the market)
train['action'] =  ( ((train['resp_1'] > 0 ) | (train['resp_2'] > 0 ) | (train['resp_3'] > 0 ) | (train['resp_4'] > 0 )) & (train['resp'] > 0 ) ).astype('int')

x_train = train.loc[:, train.columns

y_train.head(10)

#Hypertuned Model
clf = lgb.LGBMClassifier(boosting_type='gbdt', num_leaves=124, 
                         max_depth=- 1, learning_rate=0.07, n_estimators=150, 
                         subsample_for_bin=200000, objective='binary', metric='auc', 
                         min_split_gain=0.5, min_child_weight=1, min_child_samples=5, 
                         subsample=0.7, subsample_freq=1, colsample_bytree=0.75, 
                         reg_alpha=1.2, reg_lambda=1.2, random_state=42, n_jobs=- 1, 
                         silent=True, importance_type='split')
                         
%time clf.fit(x_train, y_train)

from tqdm import tqdm
import janestreet
env = janestreet.make_env() # initialize the environment
iter_test = env.iter_test() # an iterator which loops over the test set

for (test_df, pred_df) in tqdm(iter_test):
    if test_df['weight'].item() > 0:
        X_test = test_df.loc[:, test_df.columns.str.contains('feature')]
        y_preds = clf.predict(X_test)
        pred_df.action = y_preds
    else:
        pred_df.action = 0
    env.predict(pred_df)
